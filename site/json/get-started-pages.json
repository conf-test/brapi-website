{
    "0": {
        "title": "Introduction",
        "next-id": "/get-started?id=1",
        "next-title": "What is BrAPI?",
        "html": "<p>BrAPI can be very useful for a wide variety of use cases. But with its 179 possible endpoints and 36+ different data models, it can seem overwhelming for new developers to get started. So we have created this \"Getting Started\" tutorial page to help get new community members up to speed. If you are new to BrAPI, this is the place to start!</p> <p>BrAPI is a RESTful API specification, so before reading this documentation, it will be helpful to understand a little bit about REST and how it works. There are many online resources available for learning about REST. A good starting place is <a href=\"https://www.restapitutorial.com/\" target=\"_blank\">RestApiTutorial.com</a> to understand the basics and some of the current best practices. </p> <p>If you have any specific questions about BrAPI which are not answered here, please reach out to a <a href=\"mailto:brapicoordinatorselby@gmail.com\">project coordinator</a> or join the community Slack channel. </p>"
    },
    "1": {
        "title": "What is BrAPI?",
        "next-id": "/get-started?id=2",
        "next-title": "Planning a Use case",
        "html": "<h3>What is BrAPI? </h3><p> <strong> BrAPI is a Standardized RESTful Web Service API Specification for plant breeding data. </strong><br/>Below is an expansion of that definition, breaking it into its individual pieces. </p><p><strong>API</strong><br/>Many computer programs have a User Interface (UI) that allows a human user to interact with the program. Similarly, an Application Programing Interface (API) is a way for one computer program to interact with another computer program. APIâ€™s come in many different forms depending on the programing language and technologies being used, but in general an API allows commands and data to be sent retrieved between applications. </p><p><strong>Web Service</strong><br/>A Web Service is any automated service available over a network (the internet or some local network). A Web Service API allows commands and data to be sent over a network automatically from one piece of software to another. For many years, SOAP was the popular standard for Web Service APIs, but in more recent years REST has become a more popular framework. </p><p><strong>REST</strong><br/>Representational State Transfer (REST) is an architectural design for building Web Services using basic HTTP standards. A command request is a combination of an HTTP Verb (GET, POST, PUT, or DELETE) and a URL that typically describes some entity. For example, the request \"GET example.com/api/people\" might return a list of people. REST does not define any required data format, but JSON is typically used to easily represent data objects. </p><p><strong>Standardized Specification</strong><br/>BrAPI is a technical Specification that software developers can easily turn into code and communicate data using the community Standard models. There is a common misconception that BrAPI is a separate tool or an application, when in-fact each group must build their own BrAPI implementation. At its core, BrAPI is just a set of documentation that defines a standard for communicating data. However, there are many resources available within the BrAPI community that make it easy to build an implementation and make your system BrAPI compliant. </p><h3> The Specification </h3><p>The core BrAPI documentation can be found on the <a href=\"/specification\" target=\"_blank\">Specification page</a>. From there you can find links to all the different versions of the standard. You can view the documentation on GitHub, Apiary, or SwaggerHub depending on your personal preference of presentation style. On GitHub, you will find the specification presented as README files, as well as the raw <a href=\"https://swagger.io/specification/\" target=\"_blank\"> OpenAPI 3 </a> formatted YAML files. Apiary is much more focused on text documentation and is often easier to read, but might be lacking in technical detail. SwaggerHub is more focused on technical detail, but human readable text definitions may be harder to find. SwaggerHub is also more interactive with a dummy server implementation to play with and a code generation tool in a variety of common programming languages. </p><p><strong>Versions</strong><br/>For BrAPI V1, the whole specification can be found on one page for each minor version. However, in BrAPI V2, the documentation was split across four modules: BrAPI-Core, BrAPI-Germplasm, BrAPI-Genotyping, and BrAPI-Phenotyping. These modules help organize the endpoint definitions into logical groups, but they have no impact on the implementation of BrAPI.</p><h3>The Community</h3><p> The BrAPI Community is an international group developers and scientists who are invested in the BrAPI project. This community is the driving force behind the continued development of BrAPI. By contributing to the community, you can suggest changes and enhancements to the standard, use community libraries and testing resources, and easily collaborate with this international group of crop researchers. </p><p><strong>Communication</strong><br/>There are several channels for communication of the BrAPI community. General announcements and regular newsletters are sent to the mailing list. Contact the <a href=\"mailto:brapicoordinatorselby@gmail.com\">BrAPI coordinator</a> to be added to this list. There is a BrAPI community Slack channel for direct messages and collaboration between members. Click <a href=\"https://join.slack.com/t/plantbreedingapi/shared_invite/enQtNjA4NTA3OTI5NjUxLWE5ZmI0NDE0NGM1ODkxMjVmMDU1MGVjY2Q5M2QxNGNkYzMyODhkNDVmZjM0ZGI1YzEwYjEwNmY0MDM1YjllZDU\" target=\"_blank\">HERE</a> to join the Slack, and feel free to message the group with questions or requests to collaborate. The issue board on <a href=\"https://github.com/plantbreeding/API/issues\" target=\"_blank\">GitHub</a> is the best place to post issues or suggestions with the specification. On the issues board, other members of the community can comment and show support for new ideas. <br/>Finally, the BrAPI community organizes regular BrAPI hackathons. The BrAPI hackathons are a great way to travel around the world and meet the members of the community in person. Hackathons are usually held about once a year, but the location changes each year to be fair to the members of the community who have to travel long distances to attend. Hackathons are free to attend and the venues are hosted by volunteers from the community. Keep an eye on the <a href=\"/events\" target=\"_blank\"> Events page </a> and the mailing list for announcements about the next hackathon. </p><h3>Additional Resources</h3><ul><li><a href=\"/assets/docs/BrAPI_101.pptx\" target=\"_blank\">BrAPI 101 Class Presentation (.pptx)</a></li><li><a href=\"/specification\" target=\"_blank\">BrAPI Specification Page</a></li><li><a href=\"https://github.com/plantbreeding/API\" target=\"_blank\">BrAPI GitHub</a></li></ul>"
    },
    "2": {
        "title": "Planning a Use case",
        "next-id": "/get-started?id=3",
        "next-title": "Client Implementation",
        "html": "<h3>Know Your Use Case</h3><p><strong> \"We want all the databases and tools to talk to each other automatically.\" </strong><br/>This phrase comes up a lot in different forms when people first start talking about how to integrate different tools and systems. This is a nice overall goal or theme, but it is too vague to develop code. A good use case should be able to tell you specifically what you want to do, and why you want to do it. For additional help when creating use cases, look at a more formal syntax like <a href=\"https://medium.com/@SteelKiwiDev/how-to-describe-user-stories-using-gherkin-language-8cffc6b888df\" target=\"_blank\">Gherkin user stories</a>. <br/>BrAPI use cases can also be described, with more technical detail, using a series of RESTful web service calls. BrAPI endpoints are designed to be modular and flexible. This means several web service calls can be combined to accomplish a complex goal. For example, to show all the locations used in a breeding program, first get all the active studies in the program, then get all the locations associated with that list of studies. </p><p><strong>Client and Server</strong><br/>BrAPI is a standard for automatically communicating data between systems, so your use case should involve at least two software applications. These applications will always fill two rolls: a client and a server. The client will make requests and the server will accept the requests and process them. It is important to have a clear understanding of which application will be a client versus server. If the use case involves more than two applications, there may be multiple clients or servers. In some cases, an application might change between roles. Use cases can quickly become complicated, which is why Sequence Diagrams are a helpful tool.</p><p><strong>Sequence Diagram</strong><br/>A <a href=\"https://en.wikipedia.org/wiki/Sequence_diagram\" target=\"_blank\">Sequence Diagram</a> is a diagram which shows the order of events over time across multiple software applications. The diagram below shows an example with three applications making requests to each other. Time increases as we move down the diagram, so we can see that App 1 first makes a request to App 2, then App 1 makes a request to App 3, then a chain of requests is passed from 1 to 2 to 3. In this case, App 1 is always a client and App 3 is always a server. App 2 is a server until the end when it becomes a client to pass a request to App 3. This kind of diagram can help clarify what applications are involved, the role and responsibilities of each, and the order in which the operations should take place. <img src=\"assets/images/example_seq_diagram.png\" alt=\"Example Sequence Diagram\"></p>"
    },
    "3": {
        "title": "Client Implementation",
        "next-id": "/get-started?id=4",
        "next-title": "Server Implementation",
        "html": "<p>Coming Soon!</p>"
    },
    "4": {
        "title": "Server Implementation",
        "next-id": "/get-started?id=5",
        "next-title": "FAQ",
        "html": "<p>Coming Soon!</p>"
    },
    "5": {
        "title": "FAQ",
        "next-id": "/specification",
        "next-title": "BrAPI Specification",
        "html": "<p>Coming Soon!</p>"
    }
}
